package main

func run(player  int, inputs []uint64, mpc *MPC, oip *OIP) []uint64 {
output := make([]uint64, 0, 128)
nxt := 0
if player == 0 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 0 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 0 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 1 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 1 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 1 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
if player == 1 {
    mpc.TryInput([]uint64{inputs[nxt]})
    nxt += 1
}
func() {
mapping := [][]int{
    {6,6,3,4,0,2,4,6,6,4,3,10,3,12,9,13,7,4,5,14,0,6,10,3,10,18,6,5,5,2,16,2,11,21,12,9,15,9,4,19,0,6,17,17,26,7,11,13,21,4,2,7,1,6,4,3,29,26,26,8,8,6,9,16,13,10,18,13,26,11,38,16,33,22,1,25,20,21,4,0,1,2,18,6,37,43,7,10,49,35,15,28,30,41,49,30,29,53,1,41,10,43,24,1,10,5,47,11,45,60,7,32,53,54,18,14,52,43,30,32,37,59,58,49,13,30,9,2,19,11,0,68,34,61,31,14,48,7,11,3,5,67,48,30,67,38,15,26,76,15,60,49,8,54,53,37,79,8,23,14,51,76,79,40,49,9,20,71,27,78,4,83,82,44,87,14,55,61,15,32,42,70,66,18,69,88,4,84,42,88,62,93,25,55,93,82,75,71,58,39,21,96,88,48,90,96,84,11,58,62,93,16,97,111,101,65,100,33,2,26,19,18,108,26,60,32,94,118,15,91,21,36,66,39,33,91,84,43,47,62,112,97,83,83,4,37,47,110,111,102,106,16,111,70,29,106,126,99,118,5,65,106,92,96,0,56,57,98,66,46,93,137,77,112,58,104,126,131,90,73,92,113,138,112,70,87,102,82,81,42,139,149,25,89,106,108,65,44,121,77,4,85,44,74,14,140,120,89,18,6,14,62,112,43,7,128,104,158,90,163,76,51,38,137,37,98,108,149,167,71,115,22,53,166,58,143,69,23,124,137,36,139,85,157,64,42,137,52,148,142,58,151,117,147,84,84,25,175,47,67,168,127,123,26,102,48,15,129,153,67,191,85,94,63,14,35,141,3,123,93,102,41,45,193,61,154,152,77,67,69,84,175,89,100,27,146,55,198,103,194,162,7,78,177,199,47,166,139,157,134,170,25,26,110,131,45,6,211,80,203,112,19,37,153,88,36,72,160,50,48,68,115,38,200,65,118,9,13,159,37,211,137,27,71,160,90,99,37,105,136,102,194,15,76,86,91,72,138,168,70,14,29,116,68,217,14,60,76,221,24,94,78,108,123,233,146,121,175,172,173,18,40,127,246,18,212,240,194,34,73,191,205,34,207,151,87,215,41,17,59,20,143,0,76,148,126,176,212,183,102,213,66},
    {3,2,4,7,5,2,5,3,6,10,8,10,2,12,7,3,13,3,14,14,1,9,13,8,12,0,4,10,9,5,14,18,3,17,12,23,19,1,17,11,21,3,24,26,18,0,8,10,9,20,12,13,1,0,10,8,32,4,3,1,33,26,33,0,10,21,5,28,40,1,41,0,19,39,2,34,36,44,10,22,24,3,35,43,32,39,42,20,9,50,42,19,3,12,26,5,24,9,34,9,48,1,28,9,33,40,58,34,26,51,2,7,32,57,20,57,35,19,21,32,26,18,39,63,2,42,37,28,35,17,32,2,64,50,69,53,47,45,30,48,1,52,14,62,71,71,61,59,34,15,5,31,12,73,24,23,23,63,68,65,52,67,43,37,65,45,7,58,18,85,30,55,31,54,22,1,8,32,41,2,25,35,50,31,65,80,50,67,67,0,15,75,17,87,79,41,94,16,80,49,102,87,63,105,50,96,26,37,67,68,51,55,57,7,61,57,82,100,67,110,24,110,112,41,17,109,3,65,27,14,53,8,114,53,45,68,107,119,51,115,104,102,18,90,93,77,97,28,43,39,98,76,117,113,129,102,3,26,91,105,111,31,66,27,14,80,98,95,69,3,106,135,58,51,38,120,130,134,89,18,60,73,106,3,81,141,32,39,88,148,28,87,52,24,144,59,103,108,88,95,27,47,155,145,89,70,60,94,74,82,78,89,98,6,19,142,25,149,159,36,77,116,50,136,76,166,79,26,157,132,60,26,61,146,7,63,70,61,104,43,18,6,108,171,178,24,79,84,10,13,106,28,146,25,1,91,161,20,55,80,163,82,143,92,1,141,126,185,186,8,74,84,102,183,52,72,165,85,67,113,130,154,114,29,73,113,76,35,13,55,102,154,73,98,159,38,32,138,131,101,121,131,183,132,201,75,147,172,103,210,115,44,151,88,172,77,27,3,44,64,80,101,105,172,38,129,179,122,4,167,131,25,177,190,126,67,160,4,165,22,206,112,7,135,80,107,74,133,2,33,69,216,138,170,5,50,149,0,194,180,64,225,157,157,170,112,141,164,192,35,239,52,164,203,239,198,147,166,80,183,24,67,205,61,47,111,100,247,127,111,72,8,85,184,207,90,73,132,122,23,220,207,75,182,149,75,149,54,229,196,104,72},
}
out := random(263)
mpc.TryInput(out)
t := random(2)
mpc.TryInput(t)
b := mpc.TryOutput(2)
if player == 0 {
    for i := 0; i < 2; i++ {
        b[i] = add(b[i], t[i])
    }
} else {
    for i := 0; i < 2; i++ {
        b[i] = t[i]
    }
}
D := oip.TryOIPMapping(mapping, b, out)
mpc.TryInput(D)
}()
output = append(output, mpc.TryOutput(1)...)
return output
}